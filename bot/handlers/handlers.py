import enum
from gettext import find
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from markup import *
from aiogram.dispatcher import FSMContext
from db.models import BookHub
from sqlalchemy import select
import re
from .fsm import FindHubForm, AddHubForm


async def welcome(message: types.Message, state: FSMContext):

    await state.finish()
    await message.answer("–í—ñ—Ç–∞—é!", reply_markup=create_markup(main_menu_markup_text))


async def start(message: types.Message):
    if message.text == "–ó–Ω–∞–π—Å—Ü—ñ —à–∞—Ñ—É":
        await FindHubForm.location.set()
        reply = "–î–∞–¥–∞–π —ñ–Ω—Ñ–∞—Ä–º–∞—Ü—ã—é –∞–± —Å–≤–∞—ñ–º –º–µ—Å—Ü–∞–∑–Ω–∞—Ö–æ–¥–∂–∞–Ω–Ω—ñ"
        reply_markup = geolocation_markup()
    else:
        await AddHubForm.name.set()
        reply = "–£–≤—è–¥–∑—ñ—Ü–µ –Ω–∞–∑–≤—É"
        reply_markup = types.ReplyKeyboardRemove()

    await message.answer(reply, reply_markup=reply_markup)


async def cancel(message: types.Message, state: FSMContext):

    current_state = await state.get_state()

    if current_state is None:
        return

    await state.finish()
    await message.answer("–ê–¥–º–µ–Ω–µ–Ω—ã", reply_markup=create_markup(main_menu_markup_text))


async def location_find(message: types.Message, state: FSMContext):
    lat = message.location.latitude
    lon = message.location.longitude

    async with state.proxy() as data:
        data["location"] = (lat, lon)

    await FindHubForm.distance.set()
    await message.answer(
        "–£ —è–∫—ñ–º —Ä–∞–¥—ã—É—Å–µ —à—É–∫–∞—Ü—å?", reply_markup=create_markup(distance_markup_text)
    )


async def distance_find(message: types.Message, state: FSMContext):
    distance = float(re.sub("[^0-9]", "", message.text))

    async with state.proxy() as data:
        data["distance"] = distance

    db_session = message.bot.get("db")

    async with state.proxy() as data:
        dict_data = data.as_dict()

    query = select(BookHub.name, BookHub.contacts).where(
        BookHub.calculate_distance(dict_data["location"]) < dict_data["distance"]
    )

    async with db_session() as session:
        book_hubs = await session.execute(query)

    if len(book_hubs) != 0:
        book_hubs_info = [
            f"{index+1}. {hub.name}:\n{hub.contacts}\n{hub.country}, {hub.city}\n"
            for index, hub in enumerate(book_hubs)
        ]
        reply = "–ó–Ω–æ–π–¥–∑–µ–Ω–∞ –ø–∞ –≤–∞—à—ã–º –∑–∞–ø—ã—Ü–µ:\n\n" + "\n".join(book_hubs_info)
    else:
        reply = "–ù–∞–∂–∞–ª—å –ø–∞–±–ª—ñ–∑—É –Ω—è–º–∞ –±—ñ–±–ª—ñ—è—Ç—ç–∫ —Ü—ñ –ø–∞–ª—ñ—á–∞–∫ –∑ –±–µ–ª–∞—Ä—É—Å–∫—ñ–º—ñ –∫–Ω—ñ–≥–∞–º—ñ. \n–ê–ª–µ –º–∞–≥—á—ã–º–∞ –ø–æ–±–∞—á –∑ —Ç–∞–±–æ–π –∑–Ω–æ–π–¥—É—Ü—Ü–∞ –ø—Ä—ã–≤–∞—Ç–Ω—ã—è –∫–Ω—ñ–∂–∫—ñ —ñ–Ω—à—ã—Ö –∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫–∞—û. \n–ü–∞—à—É–∫–∞–π —Ç—É—Ç: staronki.space"
    await state.finish()
    await message.answer(reply, reply_markup=create_markup(main_menu_markup_text))


async def name_add(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        data["name"] = message.text

    await AddHubForm.next()
    await message.answer(
        "–£–≤—è–¥–∑—ñ—Ü–µ –∫–∞–Ω—Ç–∞–∫—Ç–Ω—É—é —ñ–Ω—Ñ–∞—Ä–º–∞—Ü—ã—é", reply_markup=create_markup(cancel_markup_text)
    )


async def contacts_add(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        data["contacts"] = message.text

    await AddHubForm.next()
    await message.answer(
        "–î–∞–¥–∞–π—Ü–µ —ñ–Ω—Ñ–∞—Ä–º–∞—Ü—ã—é –∞–± –º–µ—Å—Ü–∞–∑–Ω–∞—Ö–æ–¥–∂–∞–Ω–Ω—ñ\n(üìé->–º–µ—Å—Ü–∞–∑–Ω–∞—Ö–æ–¥–∂–∞–Ω–Ω–µ)",
        reply_markup=create_markup(cancel_markup_text),
    )


async def location_add(message: types.Message, state: FSMContext):

    lat = message.location.latitude
    lon = message.location.longitude

    async with state.proxy() as data:
        data["location"] = (lat, lon)

    db_session = message.bot.get("db")

    async with state.proxy() as data:
        dict_data = data.as_dict()

    if "location" in dict_data.keys():
        dict_data["latitude"] = dict_data["location"][0]
        dict_data["longitude"] = dict_data["location"][1]
        dict_data.pop("location", None)
    new_book_hub = BookHub(**dict_data)

    async with db_session() as session:
        session.add(new_book_hub)
        await session.commit()

    book_hubs_info = f"{new_book_hub.name}:\n{new_book_hub.contacts}\n{new_book_hub.country}, {new_book_hub.city}\n"
    reply = "–î–∞–¥–∞–¥–∑–µ–Ω–∞—è —à–∞—Ñ–∞:\n\n" + book_hubs_info

    await state.finish()
    await message.answer(reply, reply_markup=create_markup(main_menu_markup_text))


def register_handlers(dp: Dispatcher):

    dp.register_message_handler(start, Text(equals=["–ó–Ω–∞–π—Å—Ü—ñ —à–∞—Ñ—É", "–î–∞–¥–∞—Ü—å —à–∞—Ñ—É"]))

    dp.register_message_handler(cancel, Text(equals="–ê–¥–º—è–Ω—ñ—Ü—å"), state="*")
    dp.register_message_handler(
        location_find, content_types=["location", "venue"], state=FindHubForm.location
    )
    dp.register_message_handler(distance_find, state=FindHubForm.distance)

    dp.register_message_handler(name_add, state=AddHubForm.name)
    dp.register_message_handler(contacts_add, state=AddHubForm.contacts)
    dp.register_message_handler(
        location_add, content_types=["location", "venue"], state=AddHubForm.location
    )
    dp.register_message_handler(welcome, state="*")
